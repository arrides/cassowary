<?php
/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_help().
 */
function cassowary_payment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#cassowary_payment':
      return t("TODO: Create admin help text.");
      // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}


/**
 * Implements hook_init().
 */

function cassowary_payment_init() {
 /* $query = db_select('cassowary_payment_transaction', 'cpt');
  $query
  ->fields('cpt', array('tid', 'starting_date', 'ending_date', 'time',
      'amount', 'currencycode', 'sender', 'recipient', 'job',
      'payment_details', 'type_transaction', 'status'))
      ->condition('cpt.status', 'und', '=')
      ->orderBy('tid', 'ASC');
  $result = $query->execute();
  $transactions = array();
  while ($transaction = $result->fetchObject()) {
    $payment_details = unserialize($transaction->payment_details);
    if(isset($payment_details['payKey']) && !empty($payment_details['payKey'])) {
      $response = cassowary_payment_details($payment_details['payKey'], '', '');

      switch ($transaction->type_transaction) {
        case 'job':
          switch ($response['status']) {
            case 'INCOMPLETE':
              $transaction->status = $response['status'];
              cassowary_transaction_update($transaction);
              if(is_numeric($transaction->job) && $transaction->job != 0) {
                $job = node_load($transaction->job);
                if($job->workflow == 3) {
                  $job->field_hired_employee['und'][0]['target_id'] = $transaction->recipient;
                  $job->workflow = 4;
                  //node_save($job);
                }
              }
            break;
            case 'COMPLETED':
              $transaction->status = $response['status'];
              cassowary_transaction_update($transaction);
              if(is_numeric($transaction->job) && $transaction->job != 0) {
                $job = node_load($transaction->job);
                if($job->workflow == 4) {
                  $job->field_hired_employee['und'][0]['target_id'] = $transaction->recipient;
                  $job->workflow = 5;
                  //node_save($job);
                }
              }
              break;

            default:
              ;
            break;
          }
        break;

        case 'account':
          switch ($response['status']) {
            case 'CREATED':
            break;

            case 'COMPLETED':
              $user = user_load($transaction->sender);
              $plan = node_load($transaction->job);
              $transaction->status = $response['status'];
              cassowary_payment_billing_roles($user, $plan);
              //dsm($transaction);
              cassowary_transaction_update($transaction);
            break;

            case 'EXPIRED':
              $transaction->status = $response['status'];
              cassowary_transaction_update($transaction);
            break;

            default:
              ;
            break;
          }
        break;
      }
    }

    $transactions[] = $transaction;
  }
  if(!empty($transactions)) {
  }
*/

}

/**
 *
 */

function cassowary_payment_access_proccess($transaction = 0) {
  global $user;
  if ($transaction) {
    if ($user->uid == $transaction->sender && user_access('adaptive payment')) {
      return TRUE;
    }
  }
  elseif (user_access('adaptive payment')) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 *
 */

function cassowary_payment_access_work($writer, $job = 0) {
  if (!user_access('adaptive payment')) {
    return FALSE;
  }
  return cassowary_job_workflow_hire_access($writer, $job);
}

/**
 *
 */

function cassowary_payment_access_plan($plan) {
  global $user;
  // better to do it as variable
  if($plan->type != 'plan') {
    return FALSE;
  }
  if (!user_access('adaptive payment')) {
    return FALSE;
  }
  $worker_roles = variable_get('cassowary_job_workflow_worker', array());
  $worker_array = (array_intersect($worker_roles, array_keys($user->roles)));
  if (empty($worker_array)) {
    return FALSE;
  }
  return TRUE;

}

/**
 * Implements hook_menu().
 */
function cassowary_payment_menu() {
  $items = array();
  $items['payment/job/%user/%node'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Hire writer',
      'title callback' => 'cassowary_payment_title',
      'title arguments' => array(2),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cassowary_payment_page', 2, 3),
      'access arguments' => array(2, 3),
      'access callback' => 'cassowary_payment_access_work',
  );
  $items['payment/account/%cassowary_plan'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Payment for Billing plan',
      //'title callback' => 'cassowary_payment_account_title',
      //'title arguments' => array(2),
      'page callback' => 'cassowary_payment_account',
      'page arguments' => array(2),
      'access arguments' => array(2),
      'access callback' => 'cassowary_payment_access_plan',
  );
  $items['payment-processed/%cassowary_transaction'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Payment processed',
      'page callback' => 'cassowary_payment_payment_processed',
      'page arguments' => array(1),
      'access arguments' => array(1),
      'access callback' => 'cassowary_payment_access_proccess',
  );
  $items['payment-canceled/%cassowary_transaction'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Payment canceled',
      'page callback' => 'cassowary_payment_payment_canceled',
      'page arguments' => array(1),
      'access arguments' => array(1),
      'access callback' => 'cassowary_payment_access_proccess',
  );
  $items['payment-account/%cassowary_transaction'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Payment processed',
      'page callback' => 'cassowary_payment_payment_account',
      'page arguments' => array(1),
      'access arguments' => array(1),
      'access callback' => 'cassowary_payment_access_proccess',
  );
  $items['payment-redirect/%cassowary_transaction'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Payment redirect',
      'page callback' => 'cassowary_payment_redirect',
      'page arguments' => array(1),
      'access arguments' => array(1),
      'access callback' => 'cassowary_payment_access_proccess',
  );
  $items['payment-account-free/%user/%cassowary_plan'] = array(
  		'type' => MENU_CALLBACK,
  		'title' => 'Free transition',
  		'page callback' => 'cassowary_payment_free_transition',
  		'page arguments' => array(1,2),
  		'access callback' => 'cassowary_payment_access_proccess',
  );    
  $items['admin/config/cassowary/adaptive_payment'] = array(
      'title' => 'Adaptive payments',
      'description' => 'Adaptive payments settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cassowary_payment_settings'),
      'access arguments' => array('administer site configuration'),
      'type'             => MENU_NORMAL_ITEM,
  );
  // Module settings.
  $items['admin/config/cassowary/adaptive_payment/settings'] = array(
      'title' => 'Adaptive payments settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cassowary_payment_settings'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cassowary_payment_permission() {
  return array(
      'adaptive payment' => array(
          'title' => t('Adaptive payment'),
      ),
  );
}

/**
 * Form builder function for module settings.
 */
function cassowary_payment_settings() {

  $form['cassowary_payments_sandbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('sandbox'),
      '#default_value' => variable_get('cassowary_payments_sandbox', 0),
  );

  $form['cassowary_payments_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Debug mode'),
      '#default_value' => variable_get('cassowary_payments_debug', 0),
  );
  $form['cassowary_payments_API_Email'] = array(
      '#type' => 'textfield',
      '#title' => t('API_Email'),
      '#default_value' => variable_get('cassowary_payments_API_Email', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_API_UserName'] = array(
      '#type' => 'textfield',
      '#title' => t('API_UserName'),
      '#default_value' => variable_get('cassowary_payments_API_UserName', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_API_Password'] = array(
      '#type' => 'textfield',
      '#title' => t('API_Password'),
      '#default_value' => variable_get('cassowary_payments_API_Password', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_API_Signature'] = array(
      '#type' => 'textfield',
      '#title' => t('API_Signature'),
      '#default_value' => variable_get('cassowary_payments_API_Signature', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_API_AppID'] = array(
      '#type' => 'textfield',
      '#title' => t('API_AppID'),
      '#default_value' => variable_get('cassowary_payments_API_AppID', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_returnUrl'] = array(
      '#type' => 'textfield',
      '#title' => t('returnUrl'),
      '#default_value' => variable_get('cassowary_payments_returnUrl', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  $form['cassowary_payments_cancelUrl'] = array(
      '#type' => 'textfield',
      '#title' => t('cancelUrl'),
      '#default_value' => variable_get('cassowary_payments_cancelUrl', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  /*
  $form['cassowary_payments_ipnNotificationUrl'] = array(
      '#type' => 'textfield',
      '#title' => t('ipnNotificationUrl'),
      '#default_value' => variable_get('cassowary_payments_ipnNotificationUrl', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );*/
  $form['cassowary_payments_currencyCode'] = array(
      '#type' => 'textfield',
      '#title' => t('currencyCode'),
      '#default_value' => variable_get('cassowary_payments_currencyCode', 'USD'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  
  $form['cassowary_payments_Email_sender'] = array(
      '#type' => 'textfield',
      '#title' => t('sender Email'),
      '#default_value' => variable_get('cassowary_payments_Email_sender', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );
  
  $form['cassowary_payments_Email_receiver'] = array(
      '#type' => 'textfield',
      '#title' => t('receiver Email'),
      '#default_value' => variable_get('cassowary_payments_Email_receiver', ''),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * @param $form
 *
 * @param $form_state
 *
 * @param $action
 * string with action
 *
 * @param $transaction
 * object of transaction
 *
 * @return array
 *
 */

function cassowary_payment_proccess_form($form, $form_state, $action, $transaction) {

  $form['transaction'] = array('#type' => 'value', '#value' => $transaction->tid);

  $form['action'] = array('#type' => 'value', '#value' => strtolower($action));

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $action,
  );

  return $form;
}

function cassowary_payment_proccess_form_validate($form, &$form_state) {
  ;
}

function cassowary_payment_proccess_form_submit($form, &$form_state) {
  //dsm($form_state);
  $transaction = cassowary_transaction_load($form_state['values']['transaction']);
  switch ($form_state['values']['action']) {
    case 'cancel':
      $query = db_delete('cassowary_payment_transaction')
          ->condition('tid', $transaction->tid, '=')
          ->execute();
      //drupal_goto("payment/job/{$transaction->recipient}/{$transaction->job}");
      drupal_goto("/");
    break;

    case 'complete':
      $payment_details = unserialize($transaction->payment_details);
      cassowary_payment_execute_payment($payment_details['payKey']);
    break;

    case 'continue':
      $payment_details = unserialize($transaction->payment_details);

      $sandbox = variable_get('cassowary_payments_sandbox', 1);
      if ($sandbox) {
        $url = "https://www.sandbox.paypal.com/";
      }
      else{
        $url = "https://www.paypal.com/";
      }
      //$url .= 'webscr?cmd=_ap-payment&paykey=' . $payment['payKey'];
      $url .= 'webscr';
      $query = array('cmd' => '_ap-payment', 'paykey' => $payment_details['payKey']);
      $transaction->status = 'und';
      cassowary_transaction_update($transaction);
      drupal_goto($url, array('external', 'query' => $query));
      break;

    default:
      ;
    break;
  }
  return;
}

/**
 * form callback for 'payment/account/%'
 */

function cassowary_payment_account($plan) {
  global $user;
  /*
  $plans = array();
  $query = db_select('node', 'n')
    ->condition('type', 'plan')
    ->condition('status', 1)
    ->fields('n', array('title', 'nid'))
    ->execute();
  while ($record = $query->fetch()) {
    $plans[] = str_replace(' ', '-', strtolower($record->title));
    $plans_nids[$record->nid] = str_replace(' ', '-', strtolower($record->title));
  }

  if(!in_array($plan, $plans) || !in_array('writer', array_values($user->roles))) {
    return FALSE;
  }



  $nid_plan = array_search($plan, $plans_nids);
  $plan = node_load($nid_plan);*/
  
  $account = user_load($user->uid);
  
  if((time() - $account->field_last_updated['und'][0]['value'])/(24*3600) < 1) {
    drupal_set_message(t('Sorry, you can do billing operations with your account only once a day. Please, try your attempt later.'), 'error');
    drupal_goto('billing-plans');
  }
  
  $amount = _cassowary_payment_account_amount($account, $plan);
  if($amount <= 0) {
    // proccess w/o payment
	// NEED TO ADD hook_menu item
	$days = round(($plan->field_price_plan['und'][0]['value'] + $amount)*30/$plan->field_price_plan['und'][0]['value'], 0);
    drupal_goto('payment-account-free/' . $user->uid . '/' . strtolower($plan->title));
  }
  
  $currencyCode = 'USD'; // now only USD

  $sandbox = variable_get('cassowary_payments_sandbox', 1);
  $tid = db_insert('cassowary_payment_transaction')
  ->fields(array(
      'starting_date' => REQUEST_TIME,
      'ending_date' => REQUEST_TIME + 3600*24*90,
      'time' => REQUEST_TIME,
      'amount' => $plan->field_price_plan['und'][0]['value'],
      'currencycode' => $currencyCode,
      'sender' => $user->uid,
      'recipient' => 1,
      'job' => $plan->nid,
      'type_transaction' => 'account',
      'status' => 'und',
  ))
  ->execute();  

  $actionType = 'PAY';
  $receiver = array();
  $receiverEmail = variable_get('cassowary_payments_API_Email', '');
  if (empty($receiverEmail)) {
    drupal_set_message(t('PayPal API_Email does not setup.'), 'error');
    $error = TRUE;
  }
  $receiver[] = array(
      'receiverEmail' => $receiverEmail,
      'receiverAmount' => $plan->field_price_plan['und'][0]['value'],
      'receiverPrimary' => FALSE,
  );

  $optional = array();
  $optional['feesPayer'] = 'SENDER';
  
  $senderEmail = variable_get('cassowary_payments_Email_sender', '');
  if (empty($senderEmail)) {
    drupal_set_message(t('PayPal sender Email does not setup.'), 'error');
    $error = TRUE;
  }
  $optional['senderEmail'] = $sandbox ? $senderEmail : $user->mail;
  $optional['memo'] = t('Payment for the billing plan "@plan"', array('@plan' => $plan->title));

  $returnUrl = url('payment-account/' . $tid, array('absolute' => TRUE));
  $cancelUrl = url('payment-canceled/' . $tid, array('absolute' => TRUE));

  $payment = cassowary_payment_pay($actionType, $receiver, $optional, $returnUrl, $cancelUrl, $currencyCode);
  
  // it will be cancel url  
  $payment['internal_cancel_url'] = 'billing-plans';
  $serial_payment = serialize($payment);

  $tid_updated = db_update('cassowary_payment_transaction')
  ->fields(array(
      'payment_details' => $serial_payment,
  ))
  ->condition('tid', $tid, '=')
  ->execute();

  if(isset($payment['responseEnvelope.ack']) && $payment['responseEnvelope.ack'] == 'Success') {
      $sandbox = variable_get('cassowary_payments_sandbox', 1);
      if ($sandbox) {
        $url = "https://www.sandbox.paypal.com/";
      }
      else{
        $url = "https://www.paypal.com/";
      }

      $url .= 'webscr';
      $query = array('cmd' => '_ap-payment', 'paykey' => $payment['payKey']);
      drupal_goto($url, array('external', 'query' => $query));
    }
    else {
      watchdog('payment error', var_export($payment, TRUE), WATCHDOG_ERROR);
      drupal_set_message(t('Unfortunately your payment can not be processed now. Please, try your attempt later.'));
      drupal_goto('payment-account/' . $tid);
    }
  }

/*
 *   
 */ 
function  cassowary_payment_free_transition($account, $plan)  {

  if((time() - $account->field_last_updated['und'][0]['value'])/(24*3600) < 1) {
    drupal_set_message(t('Sorry, you can do billing operations with your account only once a day. Please, try your attempt later.'), 'error');
    drupal_goto('billing-plans');
  }

	$amount = _cassowary_payment_account_amount($account, $plan);
	if ($amount > 0) {
	  drupal_goto('billing-plans');
	}
	$days = round(($plan->field_price_plan['und'][0]['value'] - $amount)*30/$plan->field_price_plan['und'][0]['value'], 0);
	
	cassowary_payment_billing_roles($account, $plan, $days);	
	return t('You have new plan on @days days', array('@days' => $days));
} 
  
/**
 * form callback for 'payment/job/%user/%node'
 */

function cassowary_payment_page($form, $form_state, $writer, $job = NULL, $short = NULL) {

  global $user;
  $form = array();

  if (is_object($job)) {

    $query = db_select('cassowary_payment_transaction', 'cpt');
    $query
      ->fields('cpt', array('tid', 'starting_date', 'ending_date', 'time',
          'amount', 'currencycode', 'sender', 'recipient', 'job', 'payment_details', 'status'))
      ->condition('cpt.recipient', $writer->uid, '=')
      ->condition('cpt.job', $job->nid, '=')
      ->orderBy('tid', 'DESC');
    $result = $query->execute();
    $transaction = $result->fetchObject();
    if($transaction && $transaction->status != 'EXPIRED') {
      drupal_goto('payment-processed/' . $transaction->tid);
    }

    $form['job'] = array('#type' => 'value', '#value' => $job->nid);
  }
  else {
    $form['job'] = array('#type' => 'value', '#value' => 0);
  }

  $form['sender'] = array('#type' => 'value', '#value' => $user->uid);
  $form['recipient'] = array('#type' => 'value', '#value' => $writer->uid);
  $form['currencycode'] = array('#type' => 'value', '#value' => 'USD');

  if($short) {
    $variables = array(
          'path' => drupal_get_path('module', 'cassowary_payment') . '/images/paypal_logo_small.png',
          'alt' => 'PayPal',
          'title' => 'PayPal',
          'attributes' => array('class' => 'paypal-logo-small'),
        );
    $paypall_logo = theme('image', $variables);

    $form['confirm_price'] = array(
        '#type' => 'textfield',
        '#title' => t('Confirm Price'),
        '#size' => 60,
        '#maxlength' => 128,
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Hire'),
        '#suffix' => $paypall_logo,
    );
  }
  else {
    if (isset($job->title)) {
      $title = '<div class="payment-title">' . $job->title . '</div>';
      if (isset($job->field_loc)) {
        $location = field_view_value('node', $job, 'field_loc', $job->field_loc['und'][0]);
        $location = '<span class="payment-location">' . $location['#markup'] . '</span>';
      }
      if (isset($job->field_company)) {
        $company = field_view_value('node', $job, 'field_company', $job->field_company['und'][0]);
        $company = '<span class="payment-company">' . $company['#markup'] . '</span>';
      }
      if (isset($location) && isset($company)) {
        $title .= '<div class="payment-bot_title">' . $company . ' - ' . $location . '</div>';
      }
      elseif (isset($location)) {
        $title .= '<div class="payment-bot_title">' . $location . '</div>';
      }
      elseif (isset($company)) {
        $title .= '<div class="payment-bot_title">' . $company . '</div>';
      }
      $form['title'] = array(
          '#type' => 'item',
          '#title' => t('Title'),
          '#markup' => $title,
      );
    }

    if (isset($job->field_description)) {
      $form['description'] = array(
          '#type' => 'item',
          '#title' => t('Description'),
          '#markup' => $job->field_description['und'][0]['value'],
      );
    }

    if (isset($job->field_price)) {
      $price = field_view_value('node', $job, 'field_price', $job->field_price['und'][0]['value']);

      $form['list_price'] = array(
          '#type' => 'item',
          '#title' => t('List Price'),
          '#markup' => $price['#markup'],
      );
    }

    /*$format = 'm-d-Y H:i';

    $form['ending_date'] = array(
        '#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
        '#title' => t('Ending Date'),
        '#default_value' => date($format, strtotime('+1 month', time())),
        '#date_format' => $format,
        '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
        '#date_timezone' => 'America/New_York', // Optional, if your date has a timezone other than the site timezone.
        '#date_increment' => 30, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
        '#date_year_range' => '0:+1', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    );*/

    $form['confirm_price'] = array(
        '#type' => 'textfield',
        '#title' => t('Confirm Price, $'),
        '#size' => 60,
        '#maxlength' => 128,
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send Payment'),
        '#suffix' => 'Pay Pal',
    );
  }
  return $form;
}

function cassowary_payment_page_validate($form, &$form_state) {
  if (!empty($form_state['values']['confirm_price']) && !is_numeric($form_state['values']['confirm_price'])) {
    form_set_error('', t('You must enter a right value'));
  }
}

function cassowary_payment_page_submit($form, &$form_state) {

  //$ending_date = strtotime(($form_state['values']['ending_date']));
  $sandbox = variable_get('cassowary_payments_sandbox', 1);
  $tid = db_insert('cassowary_payment_transaction')
  ->fields(array(
      'starting_date' => REQUEST_TIME,
      'ending_date' => REQUEST_TIME + 3600*24*90,
      'time' => REQUEST_TIME,
      'amount' => $form_state['values']['confirm_price'],
      'currencycode' => $form_state['values']['currencycode'],
      'sender' => $form_state['values']['sender'],
      'recipient' => $form_state['values']['recipient'],
      'job' => $form_state['values']['job'],
      'type_transaction' => 'job',
      'status' => 'CREATED',
  ))
  ->execute();
  // it will be cancel url
  $request_url = request_uri();
  // chain
  //$actionType = 'PAY_PRIMARY';
  $actionType = 'PAY';
  $receiver = array();
  // chain
  //$receiverEmail = variable_get('cassowary_payments_API_Email', '');
  $secondary_receiver = user_load($form_state['values']['recipient']);
  $receiverEmail = variable_get('cassowary_payments_Email_receiver', '');
  if (empty($receiverEmail)) {
    drupal_set_message(t('PayPal receiver Email does not setup.'), 'error');
    $error = TRUE;
  }
  $receiverEmail = $sandbox ? $receiverEmail : $secondary_receiver->mail;

  $amount = round($form_state['values']['confirm_price']*0.95, 2);
  $receiver[] = array(
      'receiverEmail' => $receiverEmail,
      'receiverAmount' => $amount,
      //'receiverPrimary' => TRUE,
	  'receiverPrimary' => FALSE,
    );
	
	$ownerEmail = variable_get('cassowary_payments_API_Email', '');
	if (empty($ownerEmail)) {
      drupal_set_message(t('PayPal API_Email does not setup.'), 'error');
      $error = TRUE;
    }
	// fee site's owner
  $receiver[] = array(
      'receiverEmail' => $ownerEmail,
      'receiverAmount' => $form_state['values']['confirm_price'] - $amount,
      //'receiverPrimary' => TRUE,
	  'receiverPrimary' => FALSE,
    );
	
  // chain
  //$secondary_receiver = user_load($form_state['values']['recipient']);
  //$receiverEmail = $sandbox ? 'Seller_1348475145_biz@warecorp.com' : $secondary_receiver->mail;
  /*$receiver[] = array(
      //'receiverEmail' => $secondary_receiver->mail,
      // @TODO fix for live
      //'receiverEmail' => 'Seller_1348475145_biz@warecorp.com',
      'receiverEmail' => $receiverEmail,
      'receiverAmount' => $form_state['values']['confirm_price'],
      'receiverPrimary' => FALSE,
  );*/

  $sender = user_load($form_state['values']['sender']);
  $job = node_load($form_state['values']['job']);
  $optional = array();
  $optional['feesPayer'] = 'SENDER';
  //$optional['feesPayer'] = 'PRIMARYRECEIVER';
  // @TODO fix for live
  //$optional['senderEmail'] = $sender->mail;
  $senderEmail = variable_get('cassowary_payments_Email_sender', '');
  if (empty($senderEmail)) {
    drupal_set_message(t('PayPal sender Email does not setup.'), 'error');
    $error = TRUE;
  }
  $optional['senderEmail'] = $sandbox ? $senderEmail : $sender->mail;
  
  $optional['memo'] = t('Payment for the work @job', array('@job' => $job->title));

  $returnUrl = url('payment-processed/' . $tid, array('absolute' => TRUE));
  $cancelUrl = url('payment-canceled/' . $tid, array('absolute' => TRUE));
  $currencyCode = $form_state['values']['currencycode'];

  if (is_numeric($form_state['values']['job'])) {
    // it should be transfer to another func where payment will be processed
    //$job = node_load($form_state['values']['job']);
    //$job->field_hired_employee['und'][0]['target_id'] = $form_state['values']['recipient'];
    //$job->workflow = 4;
    //node_save($job);
  }

  $payment = cassowary_payment_pay($actionType, $receiver, $optional, $returnUrl, $cancelUrl, $currencyCode);
  $payment['internal_cancel_url'] = $request_url;
  $serial_payment = serialize($payment);

  $nid_updated = db_update('cassowary_payment_transaction')
  ->fields(array(
      'payment_details' => $serial_payment,
  ))
  ->condition('tid', $tid, '=')
  ->execute();

  //dsm($payment['responseEnvelope.ack']);

  if(isset($payment['responseEnvelope.ack']) && $payment['responseEnvelope.ack'] == 'Success') {
    $sandbox = variable_get('cassowary_payments_sandbox', 1);
    if ($sandbox) {
      $url = "https://www.sandbox.paypal.com/";
    }
    else{
      $url = "https://www.paypal.com/";
    }
    $url .= 'webscr?cmd=_ap-payment&paykey=' . $payment['payKey'];
    $form_state['redirect'] = $url;
  }
  else {
    watchdog('payment error', var_export($payment, TRUE), WATCHDOG_ERROR);
    drupal_set_message(t('Unfortunately your payment can not be processed now. Please, try your attempt later.'));
    $form_state['redirect'] = 'payment-processed/' . $tid;
  }
  return;
}

/**
 * Pay:
 *
 *   Transfers funds from a sender’s PayPal account to one or more receivers’
 *   PayPal accounts (up to 6 receivers).
 *
 * The following variables can be set by hook_ap_presets:
 * - adaptive_payments_returnUrl: Can be overridden in parameters.
 * - adaptive_payments_cancelUrl: Can be overridden in parameters.
 * - adaptive_payments_currencyCode: Can be overridden in parameters.
 * - adaptive_payments_ipnNotificationUrl: Can be overridden in $optional
 *    parameters.
 * - debug:
 *
 * @param $actionType
 *   Action to take:
 *   - PAY
 *   - CREATE
 *   - PAY_PRIMARY
 *   New in v 1.4.0. Not implimented yet in this Drupal API.
 * @param $receiver
 *   multi dimensional array containing
 *   (use exact name for key, note CamelCase):
 *   - array key:
 *     - receiverEmail: Receiver’s email address.
 *       Required for all and at least one receiver for single payments.
 *     - receiverAmount: Amount to be paid to the receiver.
 *       Required for all and at least one receiver for single payments.
 *     - receiverPrimary: Used for chained transactions.
 *       All default to false with only one receiver set as primary.
 *     - receiverInvoiceId: The invoice number for the payment.
 *       This data in this field shows on the Transaction Details report.
 * @param $optional
 *   Array containing optional or conditionally required fields
 *   (use exact name for key, note CamelCase):
 *   - feesPayer: The payer of PayPal fees.
 *     Allowable values are:
 *     - SENDER: Sender pays all fees (for personal, implicit,
 *              simple/parallel payments)
 *     - PRIMARYRECEIVER: Primary receiver pays all fees
 *     - EACHRECEIVER: Each receiver pays their own fee
 *       (default and personal payments)
 *     - SECONDARYONLY: Secondary receivers pay all fees
 *       (use only for chained payments with one secondary receiver)
 *   - memo: General memo. Maxlength is 1000 characters.
 *   - pin: If you are executing the Pay call against an existing preapproval
 *     that requires a pin, then you must set this.
 *   - preapprovalKey: Required for Preaproved payments
 *   - reverseAllParallelPaymentsOnError: Set TRUE to reverse payments to all
 *     receivers in a parallel payment, if payment to one or more receiver
 *     fail.
 *   - senderEmail: If you are executing the Pay call against a preapprovalKey,
 *     you should set senderEmail. It is not required if the web approval
 *     flow immediately follows this Pay call.
 *   - trackingId: Unique number for this transaction.
 *   - ipnNotificationUrl: Return URL for IPN.
 *     Optional. If this parameter is empty, it will default to preset
 *     variable.
 * @param $returnUrl
 *   Optional. If this parameter is empty, it will default to
 *   preset variable.
 * @param $cancelUrl
 *   Optional. If this parameter is empty, it will default to
 *   preset variable.
 * @param $currencyCode
 *   Optional. If this parameter is empty, it will default
 *   to the preset variable.
 *
 * @return $response_array
 *     Associative array containing the response from the server.
 */

function cassowary_payment_pay($actionType, $receiver = array(), $optional = array(), $returnUrl='', $cancelUrl='', $currencyCode = '') {

  $sandbox = variable_get('cassowary_payments_sandbox', 1);
  $debug = variable_get('cassowary_payments_debug', 1);
  $error = FALSE;
  $methodName = 'Pay';

  $AppID = empty($AppID) ? variable_get('cassowary_payments_API_AppID', '') : $AppID;
  if (empty($AppID)) {
    drupal_set_message(t('API_AppID does not setup.'), 'error');
    $error = TRUE;
  }

  $returnUrl = empty($returnUrl) ? variable_get('cassowary_payments_returnUrl', '') : $returnUrl;
  if (empty($returnUrl)) {
    drupal_set_message(t('returnUrl does not setup.'), 'error');
    $error = TRUE;
  }

  $cancelUrl = empty($cancelUrl) ? variable_get('cassowary_payments_cancelUrl', '') : $cancelUrl;
  if (empty($cancelUrl)) {
    drupal_set_message(t('cancelUrl does not setup.'), 'error');
    $error = TRUE;
  }

  $currencyCode = empty($currencyCode) ? variable_get('cassowary_payments_currencyCode', '') : $currencyCode;
  if (empty($currencyCode)) {
    drupal_set_message(t('currencyCode does not setup.'), 'error');
    $error = TRUE;
  }
  // may be don't need
  //$optional['ipnNotificationUrl'] = $optional['ipnNotificationUrl']? $optional['ipnNotificationUrl']: $presets['ipnNotificationUrl'];


  // @todo: Remove after implementation of ExecutePayment, GetPaymentOptions and SetPaymentOptions which is new in 1.4.0
  if ($actionType == 'CREATE') {
    drupal_set_message(t('Action type: CREATE is not implemented yet.'), 'error');
    return array();
  }
  // required fields
  $nvp_str  = 'clientDetails.deviceId=mydevice&clientDetails.ipAddress=' . $_SERVER['REMOTE_ADDR'] . 'clientDetails.applicationId=' . $AppID;
  $nvp_str .= "&actionType=". urlencode($actionType) ."&currencyCode=". urlencode($currencyCode);
  $nvp_str .= "&returnUrl=". urlencode($returnUrl) ."&cancelUrl=". urlencode($cancelUrl);

  if (count($receiver) == 0) {
    drupal_set_message(t('There are no receivers specified for payment.'), 'error');
    return array();
  }
  elseif (count($receiver) > 6) {
    drupal_set_message(t('Maximum allowed receivers of 6 per per transaction exceeded.'), 'error');
    return array();
  }
  else {
    reset($receiver);
    $primary_check = 0;
    while (list($key, $value) = each($receiver)) {
      if ("" != $value) {

        $nvp_str .= "&receiverList.receiver(". $key .").amount=". urlencode(round($value['receiverAmount'], 2));
        $nvp_str .= "&receiverList.receiver(". $key .").email=". urlencode($value['receiverEmail']);

        if ($value['receiverPrimary']) {
          $nvp_str .= "&receiverList.receiver(". $key .").primary=true";
        }
        else {
          $nvp_str .= "&receiverList.receiver(". $key .").primary=false";
        }

        if (isset($value['receiverInvoiceId'])) {
          $nvp_str .= "&receiverList.receiver(". $key .").invoiceId=". urlencode($value['receiverInvoiceId']);
        }

        if ($value['receiverPrimary']) {
          $primary_check++;
          if ($primary_check > 1) {
            drupal_set_message(t('More than one primary receiver were specified. Only one primary receiver is allowed for chained payments.'));
            return array();
          }
        }
      }
    }
  }



  // optional fields
  reset($optional);
  while (list($key, $value) = each($optional)) {
    if ("" != $value) {
      $nvp_str .= "&". $key ."=". urlencode($value);
    }
  }

  if ($error) {
    return array();
  }

  // Make the Pay call to PayPal
  //$response_array = $nvp_str;
  $response_array = cassowary_payment_request($methodName, $nvp_str);

  // develepment reports

  If ($debug) {
    dsm(array(
    'function called' => 'cassowary_payments_pay',
    'Input' => array(
    'actionType' => $actionType,
    'receiver' => $receiver,
    'optional' => $optional,
    ),
    'Preset variables' => array(
    'returnUrl' => $returnUrl,
    'cancelUrl' => $cancelUrl,
    'currencyCode' => $currencyCode,
    ),
    'NVP string' => $nvp_str,
    'Output' => $response_array,
    ), 'Pay');
  }

  // Return the response array
  return $response_array;
}

/**
 * Preapproval:
 *
 *  Set up preapprovals, which is an approval to make future payments on the
 *  sender’s behalf.
 *
 * @param $required
 *   Array containing required fields (use exact name for key, note CamelCase):
 *   - startingDate
 *     Format: 2009-12-13T08:00:00.000Z
 *   - endingDate
 *     Format: 2009-12-13T08:00:00.000Z
 *   - maxTotalAmountOfAllPayments
 * @param $optional
 *   Array containing optional fields (use exact name for key, note CamelCase):
 *   - senderEmail
 *   - maxNumberOfPayments
 *   - paymentPeriod
 *   - dateOfMonth
 *   - dayOfWeek
 *   - maxAmountPerPayment
 *   - maxNumberOfPaymentsPerPeriod
 *   - pinType
 *   - ipnNotificationUrl
 *     If this parameter is empty, it will default to the preset variable.
 * @param $returnUrl
 *   Optional. If this parameter is empty, it will default to the
 *   preset variable.
 * @param $cancelUrl
 *   Optional. If this parameter is empty, it will default to the
 *   preset variable.
 * @param $currencyCode
 *   Optional. If this parameter is empty, it will default to the
 *   preset variable.
 *
 * @return $response_array
 *   Associative array containing the response from the server.
 */

function cassowary_payment_preapproval($required = array(), $optional = array(), $returnUrl='', $cancelUrl='', $currencyCode ='USD') {

  $sandbox = variable_get('cassowary_payments_sandbox', 1);
  $debug = variable_get('cassowary_payments_debug', 1);

  if (!isset($required['startingDate'])) {
    drupal_set_message(t('Preapproval requires starting date to be set.'), 'error');
    $error = TRUE;
  }

  if (!isset($required['endingDate'])) {
    drupal_set_message(t('Preapproval requires ending date to be set.'), 'error');
    $error = TRUE;
  }

  if (!isset($required['maxTotalAmountOfAllPayments'])) {
    drupal_set_message(t('Preapproval requires maximum total amount of all payments to be set.'), 'error');
    $error = TRUE;
  }

  if ((strtotime($required['startingDate']) + 31536000) < strtotime($required['endingDate'])) {
    drupal_set_message(t('Ending date can not be later than one year after starting date.'), 'error');
    $error = TRUE;
  }

  if (strtotime($required['startingDate']) > strtotime($required['endingDate'])) {
    drupal_set_message(t('Ending date can not fall before starting date.'), 'error');
    $error = TRUE;
  }
  //@todo: Check max amount < 2000.00 USD, but what if it is in other currency?
  //Answer: PPx got ConvertCurrency, but that would require another call to PayPal.
  //For now, PayPal API does the check on preapproval request.

  $returnUrl = empty($returnUrl) ? variable_get('cassowary_payments_returnUrl', '') : $returnUrl;
  if (empty($returnUrl)) {
    drupal_set_message(t('returnUrl do not setup.'), 'error');
    $error = TRUE;
  }

  $cancelUrl = empty($cancelUrl) ? variable_get('cassowary_payments_cancelUrl', '') : $cancelUrl;
  if (empty($cancelUrl)) {
    drupal_set_message(t('cancelUrl do not setup.'), 'error');
    $error = TRUE;
  }

  if ($error) {
    return array();
  }

  // required fields
  $nvp_str = "returnUrl=". urlencode($returnUrl) ."&cancelUrl=". urlencode($cancelUrl);
  $nvp_str .= "&currencyCode=". urlencode($currencyCode) ."&startingDate=". urlencode($required['startingDate']);
  $nvp_str .= "&endingDate=". urlencode($required['endingDate']);
  $nvp_str .= "&maxTotalAmountOfAllPayments=". urlencode($required['maxTotalAmountOfAllPayments']);

  // optional fields
  reset($optional);
  while (list($key, $value) = each($optional)) {
    if ("" != $value) {
      $nvp_str .= "&". $key ."=" . urlencode($value);
    }
  }

  // Make the Preapproval call to PayPal
  $response_array = cassowary_payment_request("Preapproval", $nvp_str);

  // develepment reports

  If ($debug) {
    dsm(array(
    'function called' => 'cassowary_payment_preapproval',
    'Input' => array(
    'required' => $required,
    'optional' => $optional,
    ),
    'Preset variables' => array(
    'returnUrl' => $returnUrl,
    'cancelUrl' => $cancelUrl,
    'currencyCode' => $currencyCode,
    ),
    'NVP string' => $nvp_str,
    'Output' => $response_array,
    ), 'Preapproval');
  }

  // Return the response array
  return $response_array;
}

/**
 * PaymentDetails:
 *
 *  Obtains information about a payment set up with the Pay API operation.
 *
 * Use $payKey OR $transactionId OR $trackingId
 *
 *  The following variables can be set with hook_ap_presets:
 *   - debug
 *
 * @param $payKey
 *   Returned key after Pay request
 * @param $transactionId
 *   Id of succesful transaction.
 * @param $trackingId
 *   Locally generation ID for tracking, for ex. Invoice number.
 *
 * @return $response_array
 *   Associative array containing the response from the server.
 */
function cassowary_payment_details($payKey, $transactionId, $trackingId) {

  $debug = variable_get('cassowary_payments_debug', 1);

  if ("" != $payKey) {
    $nvp_str = "payKey=". urlencode($payKey);
  }
  elseif ("" != $transactionId) {
    $nvp_str = "transactionId=". urlencode($transactionId);
  }
  elseif ("" != $trackingId) {
    $nvp_str = "trackingId=". urlencode($trackingId);
  }

  // Make the PaymentDetails call to PayPal
  $response_array = cassowary_payment_request("PaymentDetails", $nvp_str);

  // develepment reports

  If ($debug) {
    dsm(array(
    'function called' => 'adaptive_payments_payment_details',
    'Input' => array(
    'payKey' => $payKey,
    'transactionId' => $transactionId,
    'trackingId' => $trackingId,
    ),
    'Preset variables' => 'none',
    'NVP string' => $nvp_str,
    'Output' => $response_array,
    ), 'PaymentDetails');
  }

  // Return the response array
  return $response_array;
}

/**
 * ExecutePayment:
 *  Execute a payment created with a PayRequest that had the actionType set
 *  to CREATE.
 *
 * @todo: ExecutePayment new in PayPal Adaptive payments 1.4.0
 *
 */
function  cassowary_payment_execute_payment($pay_key) {
  $nvp_str = "payKey=". urlencode($pay_key);
  return cassowary_payment_request('ExecutePayment', $nvp_str);
}

/**
 *  Proccess a request
 *
 *  The following API credentials can be set with hook_ap_presets.
 *  - API_UserName
 *  - API_Password
 *  - API_Signature
 *  - API_AppID
 *  - sandbox
 *  - debug
 *
 * @param $methodName
 *   Name of API method.
 * @param nvp_str
 *   NVP data.
 *
 * @return $response_array
 *   Associative array containing the response from the server.
 */
function cassowary_payment_request($methodName, $nvp_str, $api_type = 'AdaptivePayments') {

  $API_UserName = variable_get('cassowary_payments_API_UserName', '');
  $API_Password = variable_get('cassowary_payments_API_Password', '');
  $API_Signature = variable_get('cassowary_payments_API_Signature', '');
  $API_AppID = variable_get('cassowary_payments_API_AppID', '');

  $sandbox = variable_get('cassowary_payments_sandbox', 1);
  $debug = variable_get('cassowary_payments_debug', 1);

  $API_Endpoint = "";
  if ($sandbox) {
    $API_Endpoint = "https://svcs.sandbox.paypal.com/$api_type";
  }
  else{
    $API_Endpoint = "https://svcs.paypal.com/$api_type";
  }

  $API_Endpoint .= "/" . $methodName;

  //setting the curl parameters.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
  curl_setopt($ch, CURLOPT_VERBOSE, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);

  curl_setopt($ch, CURLOPT_HTTPHEADER,  array(
  'X-PAYPAL-REQUEST-DATA-FORMAT: NV',
  'X-PAYPAL-RESPONSE-DATA-FORMAT: NV',
  'X-PAYPAL-SECURITY-USERID: '. $API_UserName,
  'X-PAYPAL-SECURITY-PASSWORD: '. $API_Password,
  'X-PAYPAL-SECURITY-SIGNATURE: '. $API_Signature,
  'X-PAYPAL-APPLICATION-ID: '. $API_AppID
  ));

  // Set the HTTP Headers

  // RequestEnvelope fields
  $detail_level = urlencode("ReturnAll"); // See DetailLevelCode in the WSDL for valid enumerations
  $error_language = urlencode("en_US"); // This should be the standard RFC 3066 language identification tag, e.g., en_US

  // NVPRequest for submitting to server
  $nvp_req = "requestEnvelope.errorLanguage=$error_language&requestEnvelope.detailLevel=$detail_level";
  $nvp_req .= "&$nvp_str";

  //setting the nvp_req as POST FIELD to curl
  curl_setopt($ch, CURLOPT_POSTFIELDS, $nvp_req);

  //getting response from server
  $response = curl_exec($ch);
  //converting NVPResponse to an Associative Array
  $response_array = cassowary_payment_deformat_nvp($response);
  if ($error = curl_error($ch)) {
    If ($debug) {
      dpm($response);
    }
    watchdog('adaptive payment', t('CURL error: !error'), array('!error' => $error), WATCHDOG_ERROR);
  }
  else{
    curl_close($ch);
  }

  // develepment reports
  If ($debug) {
    dsm(array(
    'function called' => 'cassowary_payment_request',
    'Input' => array(
    'methodName' => $methodName,
    'NVP string' => $nvp_str,
    ),
    'Preset variables' => array(
    'API_UserName' => $API_UserName,
    'API_Password' => $API_Password,
    'API_Signature' => $API_Signature,
    'API_AppID' => $API_AppID,
    ),
    'NVP request' => $nvp_req,
    'Output' => $response_array,
    ), 'Proccess request with PayPal');
  }

  return $response_array;
}

/**
 * Deformat NVP
 *   This function will take NVPString and convert it to an Associative Array
 *   and it will decode the response.
 *
 * @param $nvp_str
 *   NameValue string.
 *
 * @return $nvp_array.
 */
function cassowary_payment_deformat_nvp($nvp_str) {

  $intial=0;
  $nvp_array = array();

  while (strlen($nvp_str)) {
    //postion of Key
    $keypos= strpos($nvp_str, '=');
    //position of value
    $valuepos = strpos($nvp_str, '&')? strpos($nvp_str, '&'): strlen($nvp_str);

    //getting the Key and Value values and storing in a Associative Array
    $keyval=substr($nvp_str, $intial, $keypos);
    $valval=substr($nvp_str, $keypos+1, $valuepos-$keypos-1);
    //decoding the respose
    $nvp_array[urldecode($keyval)] =urldecode( $valval);
    $nvp_str=substr($nvp_str, $valuepos+1, strlen($nvp_str));
  }
  return $nvp_array;
}

function cassowary_payment_payment_processed($transaction) {
  
  $output = '';
  $payment_details = unserialize($transaction->payment_details);
  $user_prof = user_load($transaction->recipient);
  drupal_set_title(t('Thank you for hiring ') . $user_prof->field_first_name['und'][0]['value']);
  
  if(isset($payment_details['payKey']) && !empty($payment_details['payKey'])) {
    $response = cassowary_payment_details($payment_details['payKey'], '', '');

    $sandbox = variable_get('cassowary_payments_sandbox', 1);
    if ($sandbox) {
      $url = "https://www.sandbox.paypal.com/";
    }
    else{
      $url = "https://www.paypal.com/";
    }
    //$url .= 'webscr?cmd=_ap-payment&paykey=' . $payment['payKey'];
    $url .= 'webscr';
    $query = array('cmd' => '_ap-payment', 'paykey' => $payment_details['payKey']);


    switch ($response['status']) {

      case 'CREATED':
        //$link = l('Continue', $url, array('external', 'query' => $query));
        $continue = drupal_get_form('cassowary_payment_proccess_form', 'Continue', $transaction);
        $continue = render($continue);
        $refuse = drupal_get_form('cassowary_payment_proccess_form', 'Cancel', $transaction);
        $refuse = render($refuse);
        $output = t('Your payment is not completed. ');
        $output .= t('You can complete first part of payment or cancel at all.') . $continue . ' ' . $refuse;
      break;

      case 'EXPIRED':
        /*$query = db_delete('cassowary_payment_transaction')
          ->condition('tid', $transaction->tid, '=')
          ->execute();*/
        drupal_goto("payment/job/{$transaction->recipient}/{$transaction->job}");
      break;

      case 'INCOMPLETE':
        if(is_numeric($transaction->job) && $transaction->job != 0) {
          $job = node_load($transaction->job);
          if($job->workflow == 3) {
            $job->field_hired_employee['und'][0]['target_id'] = $transaction->recipient;
            //$job->workflow = 4;
			$writer = user_load($transaction->recipient);
			$employer = user_load($job->uid);
            node_save($job);
            workflow_transition($job, 4, TRUE);

			// send to employer
			$module = 'cassowary_payment';
			$key = 'you_hired_writer';
            $to = $employer->mail;
            $from = variable_get('site_mail', ini_get('sendmail_from'));
            $params = array();
            $params['job'] = l('Jobs', 'node/' . $job->nid);
            $language = language_default();
            $send = TRUE;
            //$result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
            rules_invoke_component('rules_you_hired_writer', $employer, $writer, $job);

			// send to writer
			$key = 'you_hired_writer';
            $to = $writer->mail;
			$key = 'you_are_hired';
			//$result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
          }
        }

        $output = t('You made the first stage of payment. The writer does not get money yet.');
        $complete = drupal_get_form('cassowary_payment_proccess_form', 'Complete', $transaction);
        $output .=  render($complete);
      break;

      case 'COMPLETED':
        /*if(is_numeric($transaction->job) && $transaction->job != 0) {
          $job = node_load($transaction->job);
          if($job->workflow == 4) {
            $job->workflow = 5;
            node_save($job);
          }
        }*/
		
		if(is_numeric($transaction->job) && $transaction->job != 0) {
          $job = node_load($transaction->job);
          if($job->workflow == 3) {
            $job->field_hired_employee['und'][0]['target_id'] = $transaction->recipient;
            $job->workflow = 4;
			$writer = user_load($transaction->recipient);
			$employer = user_load($job->uid);
            node_save($job);
            workflow_transition($job, 4, TRUE);

			// send to employer
			$module = 'cassowary_payment';
			$key = 'you_hired_writer';
            $to = $employer->mail;
            $from = variable_get('site_mail', ini_get('sendmail_from'));
            $params = array();
            $params['job'] = l('Jobs', 'node/' . $job->nid);
            $language = language_default();
            $send = TRUE;
            //$result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
            rules_invoke_component('rules_you_hired_writer', $employer, $writer, $job);
            
			// send to writer
			$key = 'you_hired_writer';
            $to = $writer->mail;
			$key = 'you_are_hired';
			//$result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
          }
        }
		
		
        $transaction->status = $response['status'];
        cassowary_transaction_update($transaction);
        $output = '<p>' . t('We will notify you when the writer has either accepted or rejected your offer. The money will be held until then. If the offer is rejected, the money will be refunded to your PayPal account.');
		$output .= '</p><p>' . t('Thank you for using Cassowary!') . '</p>';
		$output .= '<p>' . l(t('< Back to Messages'), 'messages_private') . '</p>';
      break;

      default:
        $output = t('Error! Wrong status');
      break;
    }
  }
  else {
    $output = t('Error. Please, contact with site administrator.');
  }

  return $output;
}

/**
 *
 * @param $tran_id
 *   object of transaction.
 *
 * @return $content.
 */

function cassowary_payment_payment_canceled($transaction) {
  $payment_details = unserialize($transaction->payment_details);
  //dpm($payment_details);
  $query = db_delete('cassowary_payment_transaction')
          ->condition('tid', $transaction->tid, '=')
          ->execute();
  drupal_goto($payment_details['internal_cancel_url']);
}

/**
 *
 * @param $tran_id
 *   object of transaction.
 *
 * @return $content.
 */

function cassowary_payment_payment_account($transaction) {
  $output = '';
  $payment_details = unserialize($transaction->payment_details);
  //dsm(unserialize($transaction->payment_details));
  if(isset($payment_details['payKey']) && !empty($payment_details['payKey'])) {
    $response = cassowary_payment_details($payment_details['payKey'], '', '');

    $sandbox = variable_get('cassowary_payments_sandbox', 1);
    if ($sandbox) {
      $url = "https://www.sandbox.paypal.com/";
    }
    else{
      $url = "https://www.paypal.com/";
    }
    $url .= 'webscr';
    $query = array('cmd' => '_ap-payment', 'paykey' => $payment_details['payKey']);

    switch ($response['status']) {

      case 'CREATED':
        $link = l('Continue', $url, array('external', 'query' => $query));
        $refuse = drupal_get_form('cassowary_payment_proccess_form', 'Cancel', $transaction);
        $refuse = render($refuse);
        $output = t('Your payment is not completed.');
        $output .= t('You can complete payment or cancel it') . $link . ' ' . $refuse;
      break;

      case 'EXPIRED':
        /*$query = db_delete('cassowary_payment_transaction')
          ->condition('tid', $transaction->tid, '=')
          ->execute();*/
        drupal_goto("payment/account/{$transaction->job}/");
      break;

      case 'COMPLETED':
        $user = user_load($transaction->sender);
        $plan = node_load($transaction->job);
        $transaction->status = $response['status'];
        cassowary_payment_billing_roles($user, $plan);
        //dsm($transaction);
        cassowary_transaction_update($transaction);
        $output = t('You payment was successfully completed.');
      break;

      default:
        $output = t('Error! Wrong status');
      break;
    }
  }
  else {
    $output = t('Error. Please, contact with site administrator.');
  }

  return $output;
}

/**
 *
 * @param $tran_id
 *   id of transaction.
 *
 * @return $content.
 */

function cassowary_payment_payment_redirect($transaction) {
  $content = '';
  return $content;
}

/**
 * get transaction details.
 * $tid - transaction id
 * return transaction object
 */

function cassowary_transaction_load($tid) {
  $query = db_select('cassowary_payment_transaction', 'cpt');
  $query
  ->fields('cpt', array('tid', 'starting_date', 'ending_date', 'time',
      'amount', 'currencycode', 'sender', 'recipient', 'job',
      'payment_details', 'type_transaction', 'status'))
  ->condition('cpt.tid', $tid, '=')
  ->orderBy('tid', 'ASC');
  $result = $query->execute();
  $transaction = $result->fetchObject();
  return $transaction ? $transaction : FALSE;
}

/**
 * @package $plan
 * string with plan title
 *
 * @return
 * plan object or FALSE
 */

function cassowary_plan_load($plan) {
  $plans = array();
  $query = db_select('node', 'n')
    ->condition('type', 'plan')
    ->condition('status', 1)
    ->fields('n', array('title', 'nid'))
    ->execute();
  while ($record = $query->fetch()) {
    $plans[] = str_replace(' ', '-', strtolower($record->title));
    $plans_nids[$record->nid] = str_replace(' ', '-', strtolower($record->title));
  }
  if(!in_array($plan, $plans) ) {

    return FALSE;
  }
  $nid_plan = array_search($plan, $plans_nids);
  $plan = node_load($nid_plan);
  return $plan ? $plan : FALSE;

}

/**
 * @param $transaction
 */

function cassowary_transaction_update($transaction) {
  $table = 'cassowary_payment_transaction';
  $primary_keys = 'tid';
  //$result = drupal_write_record($table, &$transaction, $primary_keys);
  //return $result == SAVED_UPDATED ? TRUE : FALSE;
  $query = db_update($table)
    ->fields(array('status' => $transaction->status))
    ->condition('tid', $transaction->tid)
    ->execute();
  return $query ? TRUE : FALSE;
}

/**
 * @param $account
 */

function cassowary_payment_billing_roles($account, $plan, $day = 30) {
  $roles = array(
      '10' => 'Free',
      '6'  => 'Basic',
      '7'  => 'Plus',
      '8'  => 'Premium',
      '9'  => 'Platinum',
  );
  // id role => id plan - may be better do it through UI in admin dashboard
  $role_plan_mapping = array(
      10 => 0,
      6 => 53,
      7 => 54,
      8 => 55,
      9 => 56,
    );
  $new_role = array_search($plan->nid, $role_plan_mapping);
  if($new_role) {
    if (in_array($new_role, array_keys($account->roles))) {
      // extend current role
      
      $query = db_select('role_expire', 're')
        ->fields('re', array('expiry_timestamp'))
        ->condition('re.uid', $account->uid)
        ->condition('re.rid', $new_role)
        ->execute();
      $result = $query->fetchObject();
      if ($result->expiry_timestamp < time()) {
	    $today = date('d m Y', time());		
        $new_time = strtotime( "+". $day ." day", strtotime($today));
      } else {
        $new_time = strtotime( "+". $day ." day", $result->expiry_timestamp);
      }
      $query = db_update('role_expire')
        ->condition('uid', $account->uid)
        ->condition('rid', $new_role)
        ->fields(array('expiry_timestamp' => $new_time))
        ->execute();
		
		// update field_last_updated
		$account->field_last_updated['und'][0]['value'] = time();
		user_save($account);

		$module = 'cassowary_payment';
		$key = 'you_extanded_plan';
        $to = $account->mail;
        $from = variable_get('site_mail', ini_get('sendmail_from'));
        $params = array();
        $language = language_default();
        $send = TRUE;
        $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
    }
    else {
      // add new role
	  $current_plan = array_intersect_key($role_plan_mapping, $account->roles);
	  if(!empty($current_plan) ) {
	    $current_plan = array_pop($current_plan);
		if($current_plan != 0) {
		  $current_plan = node_load($current_plan);
		  if(isset($current_plan->field_price_plan['und'][0]['value']) && $current_plan->field_price_plan['und'][0]['value'] > $plan->field_price_plan['und'][0]['value']) {
		    $key = 'you_downgraded_plan';
		  }
		  else {
		    $key = 'you_upgraded_plan';
		  }
		}
		else {
		  $key = 'you_upgraded_plan';
		}

	  }
	  else {
	    $key = 'you_upgraded_plan';
	  }
	  $module = 'cassowary_payment';
	  $to = $account->mail;
	  $from = variable_get('site_mail', ini_get('sendmail_from'));
	  $params = array();
	  $language = language_default();
	  $send = TRUE;
	  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
	  rules_invoke_component('rules_add_new_expire_role', $account, array($new_role));
           
      // add new role, delete old
	  
      $query = db_delete('role_expire')
        ->condition('uid', $account->uid)
        ->execute();
		$today = date('d m Y', time());		
        //$new_time = strtotime( "+". $day ." day", strtotime($today));
		$new_time = time() + $day * 24 * 3600;
      $query = db_insert('role_expire')
      ->fields(array('expiry_timestamp' => $new_time,
          'uid' => $account->uid,
          'rid' => $new_role,
          ))
      ->execute();
	  
	  
	  // update field_last_updated
		$account->field_last_updated['und'][0]['value'] = time();
		user_save($account);

    }
  }
}

/**
 * Implement hook_mail().
 */
 
function cassowary_payment_mail($key, &$message, $params) {
  global $user;
  $options = array(
      'langcode' => $message['language']->language,
  );
  switch ($key) {
    case 'you_are_hired':
      $message['subject'] = t('You have been hired', array(), $options);
      $message['body'][] = t('You have been hired !job.', array('!job' => $params['job']), $options);
      break;
    case 'you_hired_writer':
      $message['subject'] = t('You\'ve hired a writer!', array(), $options);
      $message['body'][] = t('You have hired writer !job.', array('!job' => $params['job']), $options);
      /*
	   Dear {user},
       Congratulations! You have just hired {Andres Martinez} for your job: {Social Media Editor}. We will notify you when the writer has either accepted or rejected your offer. The money will be held until then. If the offer is rejected, the money will be refunded to your PayPal account.
       Thank you for using Cassowary!       
       */
      break;
    case 'you_upgraded_plan':
      $message['subject'] = t('You have upgraded your Cassowary plan', array(), $options);
      $message['body'][] = t('You have upgraded your Cassowary plan', array(), $options);
      break;
	case 'you_extanded_plan':
      $message['subject'] = t('You have extanded your Cassowary plan', array(), $options);
      $message['body'][] = t('You have extanded your Cassowary plan', array(), $options);
      break;
    case 'you_downgraded_plan':
      $message['subject'] = t('You have downgraded your Cassowary plan', array(), $options);
      $message['body'][] = t('You have downgraded your Cassowary plan', array(), $options);
      break;
  }
}

/**
 * @param $query 
 * string
 */

function _cassowary_payment_mapping ($query = 'roles') {
    $roles = array(
     '10' => 'Free',
     '6'  => 'Basic',
     '7'  => 'Plus',
     '8'  => 'Premium',
     '9'  => 'Platinum',
 );
 // id role => id plan - may be better do it through UI in admin dashboard
 $role_plan_mapping = array(
     10 => 0,
     6 => 53,
     7 => 54,
     8 => 55,
     9 => 56,
   );
   
   switch ($query) {
     case 'roles':
       return $roles;
     break;
     
     case 'role_plan_mapping':
       return $role_plan_mapping;
     break;
     
     default:
       return FALSE;
     break;
   }
   
}

/*
 * 
 */
   
function _cassowary_payment_account_amount($account, $plan) {

  $role_plan_mapping = _cassowary_payment_mapping('role_plan_mapping');
  $roles = _cassowary_payment_mapping('roles');
  
  $amount = FALSE;
  
  $new_role = array_search($plan->nid, $role_plan_mapping);
  if($new_role) {
    if (in_array($new_role, array_keys($account->roles))) {
      // extend current role
      $amount = $plan->field_price_plan['und'][0]['value'];
    }
    else {
      // add new role
    $current_plan = array_intersect_key($role_plan_mapping, $account->roles);
    if(!empty($current_plan) ) {
      $current_plan = array_pop($current_plan);
      if($current_plan != 0) {
        $current_plan = node_load($current_plan);
        $current_role = array_intersect($roles, $account->roles);
        $current_role = reset(array_keys($current_role));
        
        $query = db_select('role_expire', 're');
        $query
          ->fields('re', array('expiry_timestamp',))
          ->condition('re.uid', $account->uid, '=')
          ->condition('re.rid', $current_role, '=');
        $result = $query->execute();
        $expiry_timestamp = $result->fetchObject();
        
        if ($expiry_timestamp->expiry_timestamp > time()) {
          $balance = round((($expiry_timestamp->expiry_timestamp -time())/(24*3600*30))*$current_plan->field_price_plan['und'][0]['value'], 2);		  
		  $amount = $plan->field_price_plan['und'][0]['value'] - $balance;
        }
		else {
		  $amount = $plan->field_price_plan['und'][0]['value'];
		}
        
        
      }
      else {
        $amount = $plan->field_price_plan['und'][0]['value'];
      }
      
    }
    else {
      $amount = $plan->field_price_plan['und'][0]['value'];
    }
    

    }
  }
  
  return $amount;
}